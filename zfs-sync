#!/usr/bin/env bash
# BASH3 Boilerplate
#
# This file:
#  - Is a template to write better bash scripts
#  - Is delete-key friendly, in case you don't need e.g. command line option parsing
#
# More info:
#  - https://github.com/kvz/bash3boilerplate
#  - http://kvz.io/blog/2013/02/26/introducing-bash3boilerplate/
#
# Version 1.1.0
#
# Authors:
#  - Kevin van Zonneveld (http://kvz.io)
#
# Usage:
#  LOG_LEVEL=7 ./main.sh -f /tmp/x -d
#
# Licensed under MIT
# Copyright (c) 2013 Kevin van Zonneveld (http://kvz.io)

### Source file for auth
#####################################################################
# TODO ... only if keyring is installed and directories exist
# source variable
source "/root/.ssh/.keychain/$HOSTNAME-sh" > /dev/null 2>&1
source "/root/.ssh/.keychain/$HOSTNAME-sh-gpg" > /dev/null 2>&1


### Configuration
#####################################################################

# Environment variables and their defaults
LOG_LEVEL="${LOG_LEVEL:-6}" # 7 = debug -> 0 = emergency

# Commandline options. This defines the usage page, and is used to parse cli
# opts & defaults from. The parsing is unforgiving so be precise in your syntax
read -r -d '' usage <<-'EOF'
  -f   [arg] Filename to process. Required.
  -t   [arg] Location of tempfile. Default="/tmp/bar"
  -d         Enables debug mode
  -h         This page
EOF

# Set magic variables for current file and its directory. 
# BASH_SOURCE[0] is used so we can display the current file even if it is sourced by a parent script.
# If you need the script that was executed, consider using $0 instead.
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"


### Functions
#####################################################################

function _fmt ()      {
  local color_ok="\x1b[32m"
  local color_bad="\x1b[31m"

  local color="${color_bad}"
  if [ "${1}" = "debug" ] || [ "${1}" = "info" ] || [ "${1}" = "notice" ]; then
    color="${color_ok}"
  fi

  local color_reset="\x1b[0m"
  if [[ "${TERM}" != "xterm"* ]] || [ -t 1 ]; then
    # Don't use colors on pipes or non-recognized terminals
    color=""; color_reset=""
  fi
  echo -e "$(date -u +"%Y-%m-%d %H:%M:%S UTC") ${color}$(printf "[%9s]" ${1})${color_reset}";
}
function emergency () {                             echo "$(_fmt emergency) ${@}" 1>&2 || true; exit 1; }
function alert ()     { [ "${LOG_LEVEL}" -ge 1 ] && echo "$(_fmt alert) ${@}" 1>&2 || true; }
function critical ()  { [ "${LOG_LEVEL}" -ge 2 ] && echo "$(_fmt critical) ${@}" 1>&2 || true; }
function error ()     { [ "${LOG_LEVEL}" -ge 3 ] && echo "$(_fmt error) ${@}" 1>&2 || true; }
function warning ()   { [ "${LOG_LEVEL}" -ge 4 ] && echo "$(_fmt warning) ${@}" 1>&2 || true; }
function notice ()    { [ "${LOG_LEVEL}" -ge 5 ] && echo "$(_fmt notice) ${@}" 1>&2 || true; }
function info ()      { [ "${LOG_LEVEL}" -ge 6 ] && echo "$(_fmt info) ${@}" 1>&2 || true; }
function debug ()     { [ "${LOG_LEVEL}" -ge 7 ] && echo "$(_fmt debug) ${@}" 1>&2 || true; }

function help () {
  echo "" 1>&2
  echo " ${@}" 1>&2
  echo "" 1>&2
  echo "  ${usage}" 1>&2
  echo "" 1>&2
  exit 1
}

function cleanup_before_exit () {
  debug "Cleaning up. Done"
}
trap cleanup_before_exit EXIT


### Parse commandline options
#####################################################################

TEMP=`getopt -o vdfFhies: --long verbose,debug,full,fallback,help,incremental,email,ssh-opts: \
             -n "${__base}" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

VERBOSE=false
DEBUG=false
FULL=false
FALLBACK=false
HELP=false
INCREMENTAL=false
SSH_OPTS=""
EMAIL=""
while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=true; shift ;;
    -d | --debug ) DEBUG=true; shift ;;
    -f | --full ) FULL=true; shift ;;
    -F | --fallback ) FALLBACK=true; shift ;;
    -h | --help ) HELP=true; shift ;;
    -i | --incremental ) INCREMENTAL=true; shift ;;
    -m | --ssh-opts ) SSH_OPTS="$2"; shift 2 ;;
    -e | --email ) EMAIL="$2"; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


set -o errexit  # error on exit
set -o nounset  # no undeclared variables
set -o pipefail # catch errors even when piped

# check argument param count
if [ $# -lt 3 ]
  then
    error "Expected 3 arguments"
    help
fi

if [ $# -gt 3 ]
  then
    error "Expected 3 arguments"
    help
fi

LOCAL_FS="$1";
REMOTE_URI="$2";
REMOTE_FS="$3"

### Switches (like -d for debugmode, -h for showing helppage)
#####################################################################

# debug mode
if [ "${DEBUG}" = "true" ]; then
  set -o xtrace
  LOG_LEVEL="7"
fi

# help mode
if [ "${HELP}" = "true" ]; then
  # Help exists with code 1
  help "Help using ${0}"
fi


### Validation (decide what's required for running your script and error out)
#####################################################################

# [ -z "${arg_f}" ]     && help      "Setting a filename with -f is required"
[ -z "${LOG_LEVEL}" ] && emergency "Cannot continue without LOG_LEVEL. "


### Runtime
#####################################################################

# Exit on error. Append ||true if you expect an error.
# `set` is safer than relying on a shebang like `#!/bin/bash -e` because that is neutralized
# when someone runs your script as `bash yourscript.sh`
set -o errexit
set -o nounset

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`
set -o pipefail

if [[ "${OSTYPE}" == "darwin"* ]]; then
  info "You are on OSX"
fi

# debug "Info useful to developers for debugging the application, not useful during operations."
# info "Normal operational messages - may be harvested for reporting, measuring throughput, etc. - no action required."
# notice "Events that are unusual but not error conditions - might be summarized in an email to developers or admins to spot potential problems - no immediate action required."
# warning "Warning messages, not an error, but indication that an error will occur if action is not taken, e.g. file system 85% full - each item must be resolved within a given time. This is a debug message"
# error "Non-urgent failures, these should be relayed to developers or admins; each item must be resolved within a given time."
# critical "Should be corrected immediately, but indicates failure in a primary system, an example is a loss of a backup ISP connection."
# alert "Should be corrected immediately, therefore notify staff who can fix the problem. An example would be the loss of a primary ISP connection."
# emergency "A \"panic\" condition usually affecting multiple apps/servers/sites. At this level it would usually notify all tech staff on call."

NOW=$(date +%Y-%m-%d-%H%M-%S)
# echo ${NOW}
LOCAL_FS_NAME=$(echo "$LOCAL_FS" | sed 's:/:-:g')
REMOTE_FS_NAME=$(echo "$REMOTE_FS" | sed 's:/:-:g')
# echo ${LOCAL_FS_NAME}
# echo ${REMOTE_FS_NAME}

ZFS_SYNC_HOME="${HOME}/.zfs-sync"
if [ ! -d "${ZFS_SYNC_HOME}" ]; then
  mkdir "${ZFS_SYNC_HOME}"
fi

SYNC_FILE="${ZFS_SYNC_HOME}/${LOCAL_FS_NAME}.${REMOTE_FS_NAME}.txt"
FULL=false
if [ ! -f "${SYNC_FILE}" ]; then
  touch ${SYNC_FILE}
fi

# if the file is empty, then you'll need a full backup
[ -s "${SYNC_FILE}" ] || FULL=true # if there was no file, then perform a full backup

# take the snapshot
SNAPNAME="${LOCAL_FS}@${NOW}"
SNAPSHOT="zfs snapshot -r ${SNAPNAME}"
info "creating snapshot ${SNAPSHOT}"
${SNAPSHOT}

if [ ${FULL} = true ]
then
  info "full backup"
else
  info "incremental backup"
  LASTSNAP=$(tail -n 1 ${SYNC_FILE})
  info "last snap ${LASTSNAP}"

fi

# if everything worked
# echo "${SNAPNAME}" >> ${SYNC_FILE}

